Metadata-Version: 2.4
Name: realtime-notes-api
Version: 1.0.0
Summary: A Kubernetes-native service for real-time, multi-user Markdown note editing with semantic AI search
Home-page: https://github.com/yourusername/realtime-notes-api
Author: Your Name
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.111.0
Requires-Dist: uvicorn>=0.27.0
Requires-Dist: pydantic>=2.4.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: alembic>=1.12.0
Requires-Dist: psycopg2-binary>=2.9.9
Requires-Dist: python-jose>=3.3.0
Requires-Dist: passlib>=1.7.4
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: redis>=5.0.0
Requires-Dist: grpcio>=1.59.0
Requires-Dist: grpcio-tools>=1.59.0
Requires-Dist: protobuf>=4.24.0
Requires-Dist: websockets>=12.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: scipy>=1.10.0
Requires-Dist: jsonmerge>=1.9.0
Requires-Dist: prometheus-client>=0.17.0
Requires-Dist: opentelemetry-api>=1.20.0
Requires-Dist: opentelemetry-sdk>=1.20.0
Requires-Dist: opentelemetry-exporter-otlp>=1.20.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: httpx>=0.24.1
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.1; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: ruff>=0.0.284; extra == "dev"
Requires-Dist: mypy>=1.5.1; extra == "dev"
Provides-Extra: faiss
Requires-Dist: faiss-cpu>=1.8.0; extra == "faiss"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Realtime Notes API

A Kubernetes-native service that delivers real-time, multi-user Markdown note editing plus semantic AI search as a turnkey backend component.

## Features

- Real-time CRDT collaboration via WebSocket
- CRUD & versioned fetch of Markdown notes
- Vector search (FAISS) scoped to tenant
- Multiple API surfaces: REST, gRPC, and WebSocket
- Authentication with API Keys and OAuth 2.1
- RBAC with row-level isolation
- Rate limiting & quotas
- Usage metering & billing

## Quick Start

### Prerequisites

- Kubernetes 1.28+ cluster (kind, minikube, or any managed K8s)
- Helm v3
- kubectl

### Installation

```bash
# Clone the repository
git clone https://github.com/ShlinBrian/Realtime_Note_API
cd realtime-note-api

# Install with Helm
helm install realtime-notes ./helm/realtime-notes
```

### Using the API

```bash
# Get API key
export API_KEY=$(kubectl get secret realtime-note-api-keys -o jsonpath='{.data.admin-key}' | base64 -d)

# Create a note
curl -X POST "https://your-cluster-ip/v1/notes" \
  -H "x-api-key: $API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"title": "My First Note", "content_md": "# Hello World\n\nThis is a test note."}'
```

## Local Development with Docker Compose

The easiest way to run the application locally is using Docker Compose:

```bash
# Start all services
docker compose up -d

# Check logs
docker compose logs -f

# Stop all services
docker compose down
```

Once the services are running:

1. Access the API at http://localhost:8000
2. API documentation is available at http://localhost:8000/docs
3. The initial API key is generated and saved in `local_api_key.txt`
4. PgAdmin is available at http://localhost:5050 (login: admin@example.com / admin)

### Testing the API Locally

```bash
# Get the API key
API_KEY=$(cat local_api_key.txt | grep -oP 'API_KEY=\K.*')

# Create a note
curl -X POST "http://localhost:8000/v1/notes" \
  -H "x-api-key: $API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"title": "My First Note", "content_md": "# Hello World\n\nThis is a test note."}'
```

## Development

You have two options for setting up your development environment: conda (recommended) or pip. Choose one of the following approaches:

### Option 1: Using conda (recommended for FAISS support)

```bash
# Create and activate conda environment
conda create --name realtime-note-api python=3.11
conda activate realtime-note-api

# Install FAISS via conda
conda install -c conda-forge faiss-cpu

# Install the project and development dependencies
pip install -e .
pip install -e ".[dev]"

# Run tests
pytest

# Run local development server
uvicorn api.main:app --reload
```

### Option 2: Using pip with venv

```bash
# Create and activate virtual environment
python -m venv venv
source venv/bin/activate

# Choose one of the following installation options:

# Option A: Install without FAISS (simple search will be used)
pip install -e .

# Option B: Install with FAISS (may require additional system dependencies)
pip install -e ".[faiss]"

# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run local development server
uvicorn api.main:app --reload
```

## Documentation

API documentation is available at `/docs` when the service is running.

## License

MIT
